<#@ Template Language="C#" #>
<#@ Import Namespace="System.CodeDom" #>
<#@ Import Namespace="System.CodeDom.Compiler" #>
<#@ Import Namespace="Microsoft.CSharp" #>
<# 
    Type[] types = new Type[] 
    { 
        typeof(int),
        typeof(int?), 
        typeof(long), 
        typeof(long?), 
        typeof(float),
        typeof(float?),
        typeof(double),
        typeof(double?),
        typeof(decimal),
        typeof(decimal?),
    };
#>
#region License, Terms and Author(s)
//
// BackLINQ
// Copyright (c) 2008 Atif Aziz. All rights reserved.
//
//  Author(s):
//
//      Atif Aziz, http://www.raboof.com
//
// This library is free software; you can redistribute it and/or modify it 
// under the terms of the New BSD License, a copy of which should have 
// been delivered along with this distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
// PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
#endregion

namespace BackLinq
{
    #region Imports

    using System;
    using System.Collections.Generic;

    #endregion

    public static partial class Enumerable
    {
<#   
    CodeDomProvider cscp = new CSharpCodeProvider();
    foreach (Type type in types) 
    { 
        bool isNullable = type.IsGenericType && typeof(Nullable<>) == type.GetGenericTypeDefinition();
        string csBaseType, csType, doc;
        Type baseType;

        if (isNullable)
        {
            baseType = type.GetGenericArguments()[0];
            csBaseType = cscp.GetTypeOutput(new CodeTypeReference(baseType));
            csType = csBaseType + "?";
            doc = string.Empty;
        }
        else
        {
            baseType = type;
            csBaseType = csType = cscp.GetTypeOutput(new CodeTypeReference(type));
            doc = "nullable ";
        }
        
        doc += "<see cref=\"" + baseType + "\" />";
#>
        /// <summary>
        /// Computes the sum of a sequence of <#= doc #> values.
        /// </summary>

        public static <#= csType #> Sum(
            this IEnumerable<<#= csType #>> source)
        {
            CheckNotNull(source, "source");

            <#= csBaseType #> sum = 0;
            foreach (var num in source)
                sum = checked(sum + <#= isNullable ? "(num ?? 0)" : "num" #>);

            return sum;
        }

        /// <summary>
        /// Computes the sum of a sequence of <#= doc #> 
        /// values that are obtained by invoking a transform function on 
        /// each element of the input sequence.
        /// </summary>

        public static <#= csType #> Sum<TSource>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= csType #>> selector)
        {
            CheckNotNull(source, "source");
            CheckNotNull(selector, "selector");

            <#= csType #> sum = 0;
            foreach (var num in source)
                sum = checked(sum + selector(num));

            return sum;
        }
<#
        string csSumType = type == typeof(int) || type == typeof(long) || type == typeof(int?) || type == typeof(long?) 
                         ? "long" : csBaseType;
        string csAvgType = type == typeof(int) || type == typeof(long) || type == typeof(int?) || type == typeof(long?) 
                         ? "double" : csBaseType;
#>        
        /// <summary>
        /// Computes the average of a sequence of <#= doc #> values.
        /// </summary>

        public static <#= csAvgType #> Average(
            this IEnumerable<<#= csType #>> source)
        {
            CheckNotNull(source, "source");

            <#= csSumType #> sum = 0;
            long count = 0;

            foreach (var num in source<# if (isNullable) { #>.Where(n => n != null)<# } #>)
            checked
            {
                sum += (<#= csBaseType #>) num;
                count++;
            }

            if (count == 0)
                throw new InvalidOperationException();

            return (<#= csAvgType #>) sum / count;
        }

        /// <summary>
        /// Computes the average of a sequence of <#= doc #> values 
        /// that are obtained by invoking a transform function on each 
        /// element of the input sequence.
        /// </summary>

        public static <#= csAvgType #> Average<TSource>(
            this IEnumerable<TSource> source,
            Func<TSource, <#= csType #>> selector)
        {
            return source.Select(selector).Average();
        }

<#  } #>
    }
}